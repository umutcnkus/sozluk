{"version":3,"sources":["components/word-card/WordCard.tsx","helpers/ApiHelper.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WordCard","props","state","definitions","word","urlParamsArray","window","location","pathname","split","wordToSearch","decodeURIComponent","length","this","getDefinition","fetch","basePath","then","response","json","data","setState","anlamlarListe","map","anlam","text","toLowerCase","className","definition","i","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAYaA,EAAb,kDAEI,WAAYC,GAAsB,IAAD,8BAC7B,cAAMA,IACDC,MAAQ,CACTC,YAAa,GACbC,KAAM,IAJmB,EAFrC,qDAUI,WACI,IACMC,EADcC,OAAOC,SAASC,SACDC,MAAM,KACnCC,EAAeC,mBAAmBN,EAAeA,EAAeO,OAAS,IAC/EC,KAAKC,cAAcJ,KAd3B,gCAiBI,WACIG,KAAKC,cAAcD,KAAKX,MAAME,QAlBtC,2BAqBI,SAAcA,GAAc,IAAD,QC/BF,SAACA,GAE1B,OAAOW,MADYC,iCAAwBZ,GAEtCa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WD6B3BL,CAAcV,GAAMa,MAChB,SAACG,GACG,IACI,EAAKC,SAAS,CACVlB,YAAaiB,EAAK,GAAGE,cAAcC,KAAI,SAACC,GACpC,MAAO,CACHC,KAAMD,EAAMA,UAGpBpB,KAAMA,EAAKsB,gBAGnB,SACI,EAAKL,SAAS,CAAEjB,KAAM,eAnC1C,oBAyCI,WACI,OACI,qBAAKuB,UAAU,sBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,oBAAIA,UAAU,aAAd,SAA4Bd,KAAKX,MAAME,SAE3C,qBAAKuB,UAAU,cAAf,SACKd,KAAKX,MAAMC,YAAYoB,KAAI,SAACK,EAAYC,GAAb,OACxB,sBAAKF,UAAU,uBAAf,UACI,sBAAKA,UAAU,oBAAf,UAAqCE,EAAI,EAAzC,QACA,sBAAKF,UAAU,kBAAf,UAAmCC,EAAWH,KAA9C,wBApDhC,GAA8BK,IAAMC,WEArBC,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCOSM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd94449f.chunk.js","sourcesContent":["import React from 'react';\nimport { getDefinition } from '../../helpers/ApiHelper';\nimport { WordDefinition } from '../../models/interfaces';\nimport './WordCard.css';\n\nexport interface WordCardProps {}\n\nexport interface WordCardState {\n    definitions: WordDefinition[];\n    word: string;\n}\n\nexport class WordCard extends React.Component<WordCardProps, WordCardState> {\n\n    constructor(props: WordCardProps){\n        super(props);\n        this.state = {\n            definitions: [],\n            word: \"\"\n        }\n    }\n\n    componentDidMount(){\n        const urlPathName = window.location.pathname;\n        const urlParamsArray = urlPathName.split('/');\n        const wordToSearch = decodeURIComponent(urlParamsArray[urlParamsArray.length - 1]);\n        this.getDefinition(wordToSearch)\n    }\n\n    componentDidUpdate(){\n        this.getDefinition(this.state.word);\n    }\n\n    getDefinition(word: string){\n        getDefinition(word).then(\n            (data: any) => {\n                try {\n                    this.setState({\n                        definitions: data[0].anlamlarListe.map((anlam: { anlam: any; }) => {\n                            return {\n                                text: anlam.anlam\n                            }\n                        }),\n                        word: word.toLowerCase()\n                    })\n                }\n                catch {\n                    this.setState({ word: \"hata\"})\n                }\n            }\n        )\n    }\n\n    render(){\n        return (\n            <div className=\"word-card-container\">\n                <div className=\"inner-box\">\n                    <div className=\"title-container\">\n                        <h3 className=\"word-title\">{this.state.word}</h3>\n                    </div>\n                    <div className=\"definitions\">\n                        {this.state.definitions.map((definition, i) => (\n                            <div className=\"definition-container\">\n                                <div className=\"definition-number\">{ i + 1 }. </div>\n                                <div className=\"definition-text\">{ definition.text } </div>\n                            </div>\n                        ))\n\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n","import { basePath } from '../config'\n\nexport const getDefinition = (word: string) => {\n    const requestUrl = basePath + \"gts?ara=\" + word;\n    return fetch(requestUrl)\n        .then(response => response.json())\n}","import React from 'react';\nimport './App.css';\nimport { WordCard } from './components/word-card/WordCard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WordCard></WordCard>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}