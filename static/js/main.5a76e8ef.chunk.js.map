{"version":3,"sources":["helpers/ApiHelper.ts","components/word-card/WordCard.tsx","components/search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getDefinition","word","fetch","basePath","then","response","json","data","anlamlarListe","map","anlam","text","WordCard","props","state","definitions","isVisible","this","searchWordFromUrl","window","addEventListener","e","match","params","wordToSearch","decodeURIComponent","setState","catch","className","animationIn","animationOut","animationInDuration","definition","i","React","Component","Search","setTimeout","key","location","hash","target","value","Fragment","type","placeholder","onKeyDown","handleKeyDown","autoFocus","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a76e8ef.chunk.js","sourcesContent":["import { basePath } from '../config';\n\nexport const getDefinition = (word: string) => {\n    const requestUrl = basePath + 'gts?ara=' + word;\n    return fetch(requestUrl)\n        .then((response) => response.json())\n        .then((data) =>\n            data[0].anlamlarListe.map((anlam: { anlam: any }) => {\n                return {\n                    text: anlam.anlam,\n                };\n            })\n        );\n};\n","import React from 'react';\nimport { Animated } from \"react-animated-css\";\nimport { RouteComponentProps } from 'react-router-dom';\nimport { getDefinition } from '../../helpers/ApiHelper';\nimport { WordDefinition } from '../../models/interfaces';\nimport './WordCard.css';\n\nexport interface OnboardingPageRouterProps {\n    word: string\n}\nexport interface WordCardProps extends RouteComponentProps<OnboardingPageRouterProps> { }\n\nexport interface WordCardState {\n    definitions: WordDefinition[];\n    word: string;\n    isVisible: boolean;\n}\n\nexport class WordCard extends React.Component<WordCardProps, WordCardState> {\n\n    constructor(props: WordCardProps) {\n        super(props);\n        this.state = {\n            definitions: [],\n            word: \"\",\n            isVisible: false\n        }\n    }\n\n    componentDidMount() {\n        this.searchWordFromUrl();\n        window.addEventListener(\"hashchange\", (e) => this.searchWordFromUrl());\n    }\n\n    searchWordFromUrl() {\n        const { word } = this.props.match.params;\n        const wordToSearch = decodeURIComponent(word);\n        this.getDefinition(wordToSearch)\n    }\n\n    getDefinition(word: string) {\n        getDefinition(word)\n            .then((data: any) => this.setState({ definitions: data, word: word, isVisible: true }))\n            .catch(() => {\n                this.setState({ word: \"hata\" });\n                getDefinition(\"hata\")\n            }\n            )\n    }\n\n    render() {\n        return (this.state.isVisible &&\n            <Animated className=\"word-card-container\" animationIn=\"fadeIn\" animationOut=\"fadeOut\" animationInDuration={1000} isVisible={this.state.isVisible}>\n                <div className=\"inner-box\">\n                    <div className=\"title-container\">\n                        <h3 className=\"word-title\">{this.state.word}</h3>\n                    </div>\n                    <div className=\"definitions\">\n                        {this.state.definitions.map((definition, i) => (\n                            <Animated animationIn=\"fadeInUp\" animationOut=\"fadeOut\" animationInDuration={1500 + i * 100} isVisible={this.state.isVisible}>\n                                <div className=\"definition-container\" key={i}>\n                                    <div className=\"definition-number\">{i + 1}. </div>\n                                    <div className=\"definition-text\">{definition.text} </div>\n                                </div>\n                            </Animated>\n                        ))\n\n                        }\n                    </div>\n                </div>\n            </Animated>\n        )\n    }\n\n}\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { getDefinition } from '../../helpers/ApiHelper';\nimport { WordDefinition } from '../../models/interfaces';\nimport './Search.css';\n\nexport interface OnboardingPageRouterProps {\n    word: string\n}\nexport interface SearchProps extends RouteComponentProps<OnboardingPageRouterProps> { }\n\nexport interface SearchState {\n    definitions: WordDefinition[];\n}\n\nexport class Search extends React.Component<SearchProps, SearchState> {\n\n    constructor(props: SearchProps) {\n        super(props);\n        this.state = {\n            definitions: []\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            getDefinition(\"hata\").then((data) => this.setState({ definitions: data }));\n        }, 1000);\n    }\n\n    handleKeyDown(e: any) {\n        if (e.key == 'Enter') {\n            window.location.hash = e?.target.value;\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"search-box-container\">\n                    <input className=\"search-box\" type=\"text\"\n                        placeholder=\"sözcük ara\"\n                        onKeyDown={(e) => this.handleKeyDown(e)}\n                        autoFocus>\n\n                    </input>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n}\n","import React from 'react';\nimport './App.css';\nimport { WordCard } from './components/word-card/WordCard';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { Search } from './components/search/Search';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/:word/\" exact component={WordCard} />\n        <Route path=\"/\" exact component={Search} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}